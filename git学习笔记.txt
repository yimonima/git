git分布式版本管理系统

git init[项目名称] 创建版本控制
git config --global user.name[user.email] [配置信息] 配置git的用户和邮件信息
git config --global core.editor vim/merge.tool vimdiff 配置默认编辑器和差异化分析器
git config --list/git config user.name 查看配置信息列表和单独查看用户名

git的工作流程
git工作区（工作目录）、暂存区（index索引）、版本库（.git文件夹）

git init项目初始化 git clone [各种协议地址]复制项目
git add . 添加暂存区 -u[--update]更新修改 -A参数提交所有包含已经删除的 第一次添加才会有默认master分支

git diff命令查看时没有改动是没有任何信息 即第一次提交
git diff查看改动状态 -s简短 --cached查看已经缓存改动 HEAD查看所有改动即主分支master --stat简短摘要

git commit -m [提交说明] 把缓存区提交仓库 -a参数跳过缓存直接提交修改

git reset HEAD取消缓存内容 即指向当前主分支 取消git add的添加

git rm <file>从版本库删除文件 -f参数则为之前已经放入缓存区 --cached则保留文件解除追踪

本地删除文件需要恢复用 git checkout -- <file> git mv <fileName> <otherFileName>修改文件名

git remote add origin https://github.com/yimonima/git.git关联并添加组织的远程仓库
git push -u origin master以origin用户的身份推送master分支

git clone [url]远程复制git项目

git fetch origin master获取组织master分支最新

git pull origin master更新远程版本并合并到本地

git branch [branch name] git分支创建（查看不加branch name）-d
切换用 git checkout [branch name] 加-b参数则创建并切换分支

git merge合并分支 在需要合并分支上操作合并分支 git merge dev(in master branch)

git remote -v查看远程库信息 git push origin master推送master分支到远程仓库

git checkout -- <file>撤销该文件的本地修改

git log --pretty=oneline日志一行查看

git reset --head HEAD^退回上一个版本（上上版本HEAD^^ 100版本HEAD~100）

git reflog查看每一次命令

git tag <tag name>